<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>中间件</title>
    <link>https://www6v.github.io/www6vMiddleware/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
    <description>Recent content on 中间件</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 21 Jan 2018 09:59:17 +0000</lastBuildDate>
    <atom:link href="https://www6v.github.io/www6vMiddleware/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>缓存(cache)总结</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/Redis&#43;%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98/cacheSummary/</link>
      <pubDate>Sun, 21 Jan 2018 09:59:17 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/Redis&#43;%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98/cacheSummary/</guid>
      <description>&#xA;总结&#xD;#&#xD;参考&#xD;#&#xD;应用系统数据缓存设计 淘宝技术部 *** 失效 Local Cache的小TIP 阿里 放翁（文初） xxx xxx xxx xxx cache 58沈剑 </description>
    </item>
    <item>
      <title>缓存(cache)机制</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/Redis&#43;%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98/cache/</link>
      <pubDate>Thu, 07 Dec 2017 09:58:48 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/Redis&#43;%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98/cache/</guid>
      <description>缓存数据分布模式&#xD;#&#xD;分片模式 （sharding）&#xD;#&#xD;数据正交分散到大量机器， 可以做到线性的可伸缩性， 但是实现可用性比较困难。还有一个好处是可以通过集群做负载均衡来实现数据的管理。 根据CAP理论， 在高可用的场景下， 数据分区的容忍性需要牺牲一定的一致性。 相应各个副本的同步策略也有不同， 主要可分为同步和异步方式。由客户端做一致性hash把数据分片存放到服务端。&#xA;复制模式&#xD;#&#xD;数据在集群中存在多个副本。 在本地缓存的集群中，数据会复制到所有的节点中，没有网络延迟和等待时间的集群成员都是可用的。 多副本通过低延迟访问来提供高性能。 在修改数据时需要复制新的版本数据到所有的副本， 在高并发修改的场景下会限制系统的可伸缩性， 副本数不会调的太高。&#xA;本地缓存&#xD;#&#xD;在同一机房内的， 需要适量考虑本地cache， 数据压缩传输等以节省内网数据传输量 。 跨机房的缓存有地域区分，用户往往访问同一机房， 这样可以做本地的cache。 机房之间通过队列的方式进行异步和压缩传输，以提高用户请求的相应度。&#xA;缓存与场景&#xD;#&#xD;1. 非共性数据缓存 eg. 微博， 博客个人首页&#xD;#&#xD;问题：缓存所有的数据性价比不高，　命中率不高 解决方案：&#xA;I. 热点缓存。&#xD;#&#xD;只缓存那些热点的数据。可以缓存在线的用户，　缓存热销的商品，　缓存热点用户的数据。热点规则表示如何匹配到一个热点，即这个查询请求是否请求了热点数据。 根据2/8原则，小部分的数据占用了大部分的访问量。 这也就是twitter page cache 是40%，而不是90%的原因。 II. 非热点数据，&#xD;#&#xD;可以采用nosql技术（redies），可以把它看成可持久化的缓存。 原理类似虚拟内存，理论上不受内存大小的限制。使用NoSQL来做缓存，我们可以把一些不常访问、不怎么更新的数据也缓存起来。比如论坛、新闻的老数据、数据列表的靠后的页面，虽然用户访问不多，但是搜索引擎爬虫会访问，也可能导致系统负载上升。 从外存拿数据减少了计算的开销 ，由于其数据库结构的简单，从磁盘获取一次数 据也比从数据库一次耗时的查询划算很多。&#xA;III. read-only缓存&#xD;#&#xD;缓存是read-only的， 如果有cache数据的更新， 把cache置为失效的。 如果有多个副本，这样做能够减少replication更新数据的开销， 只需要发送置失效的消息即可。&#xA;2. 高并发更新场景&#xD;#&#xD;I.</description>
    </item>
    <item>
      <title>分布式锁</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/distributedLock/</link>
      <pubDate>Mon, 05 Dec 2016 23:33:34 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/distributedLock/</guid>
      <description>分布式锁&#xD;#&#xD;锁的特性&#xD;#&#xD;排它性 超时释放锁 zk临时目录 高可用，锁集群容错[图2]， 安全性[3]， 可重入锁, 避免死锁 [4] 乐观锁, 悲观锁[6][图2] 实现&#xD;#&#xD;Redis[5]&#xD;#&#xD;Zookeeper[4]&#xD;#&#xD;参考&#xD;#&#xD;分布式系统互斥性与幂等性问题的分析与解决 点评 蒋谞&#xA;漫画：什么是分布式锁？ 程序员小灰&#xA;分布式服务总结 分布式锁&#xA;通过栅栏(fencing)使得锁更安全, fencing token How to do distributed locking Martin Kleppmann&#xA;{% post_link &amp;lsquo;zookeeperDistributedLock&amp;rsquo; %} self&#xA;Go to Page self&#xA;Redis分布式锁实现秒杀业务(乐观锁、悲观锁) 最后 乐观锁: jedis的watch方法&#xA;SOFAJRaft-RheaKV 分布式锁实现剖析 | SOFAJRaft 实现原理 SOFALab 米麒麟 未</description>
    </item>
    <item>
      <title>分布式ID生成 发号器</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/%E5%85%B6%E4%BB%96/id/</link>
      <pubDate>Mon, 15 Aug 2016 06:28:23 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/%E5%85%B6%E4%BB%96/id/</guid>
      <description>&#xA;一. UUID&#xD;#&#xD;缺点&#xD;#&#xD;没有业务含义 不是自增的， 某些场景需要按id排序， 不适合做数据库主键。&#xA;ID 有序也会提升数据的写入性能， 数据库索引B+树的插入。 二. Snowflake&#xD;#&#xD;Snowflake算法实现&#xA;实现方式：&#xD;#&#xD;嵌入在服务器中 独立的分布式id服务器 缺点&#xD;#&#xD;最大的缺点就是它依赖于系统的时间戳，一旦系统时间不准，就有可能生成重复的 ID。 所以如果我们发现系统时钟不准，就可以让发号器暂时拒绝发号，直到时钟准确为止。 可以使用ntp服务器同步服务的系统时间。&#xA;优化&#xD;#&#xD;时间戳不记录毫秒而是记录秒，这样在一个时间区间里可以多发出几个号，避免出现分库分表时数据分配不均。 批量id 参考：&#xD;#&#xD;Leaf——美团点评分布式ID生成系统 照东 服务化框架－分布式Unique ID的生成方法一览 江南白衣 Leaf：美团分布式ID生成服务开源 发号器：如何保证分库分表后ID的全局唯一性？ 唐扬 </description>
    </item>
  </channel>
</rss>
