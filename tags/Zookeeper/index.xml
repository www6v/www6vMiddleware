<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zookeeper on 中间件</title>
    <link>https://www6v.github.io/www6vMiddleware/tags/Zookeeper/</link>
    <description>Recent content in Zookeeper on 中间件</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 May 2021 10:35:05 +0000</lastBuildDate>
    <atom:link href="https://www6v.github.io/www6vMiddleware/tags/Zookeeper/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Zookeeper-分布式锁</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/zookeeperDistributedLock/</link>
      <pubDate>Wed, 12 May 2021 10:35:05 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/zookeeperDistributedLock/</guid>
      <description>&#xA;基于ZK的分布式锁&#xD;#&#xD;可重入性[2][3]-实现方式&#xD;#&#xD;[chat]&#xA;在ZooKeeper中，分布式锁的可重入性是通过在锁节点的数据中保存一个拥有者ID和计数器来实现的。具体来说，当一个客户端第一次获取锁时，它会在锁节点的数据中设置一个拥有者ID，并将计数器设置为1。当这个客户端再次请求获取锁时，它会检查锁节点的数据中是否已经设置了拥有者ID，并且该ID是否与自己相同。如果相同，则将计数器加1，表示该客户端已经多次获取了锁；如果不同，则该客户端需要等待锁的释放。&#xA;通过保存拥有者ID和计数器，ZooKeeper可以轻松地实现分布式锁的可重入性。当一个客户端多次获取锁时，它只需要检查锁节点的数据中保存的拥有者ID是否与自己相同，并且计数器是否大于等于1即可。如果满足条件，则说明该客户端已经拥有了锁，并且可以继续执行操作；否则，该客户端需要等待锁的释放。&#xA;需要注意的是，为了避免死锁，ZooKeeper分布式锁的可重入性实现中还需要考虑锁的释放顺序。具体来说，当一个客户端释放锁时，需要按照获取锁的顺序依次释放所有的锁，从而避免死锁的发生。&#xA;总之，ZooKeeper分布式锁的可重入性是通过在锁节点的数据中保存拥有者ID和计数器来实现的。这种实现方式简单、高效，并且可以避免死锁的发生。&#xA;[endchat]&#xA;[chat] 总结: 在ZooKeeper中，分布式锁的可重入性是如何实现的&#xA;具体来说，它通过在锁节点的数据中保存拥有者ID和计数器来判断一个客户端是否已经持有锁，并且在客户端多次获取锁时，可以通过增加计数器的方式来实现可重入性。为了避免死锁，ZooKeeper分布式锁的实现中还需要考虑锁的释放顺序，即按照获取锁的顺序依次释放所有的锁。这种实现方式简单、高效，并且可以避免死锁的发生。&#xA;[endchat]&#xA;可重入性[2]-代码实现&#xD;#&#xD;@Override public boolean lock() { //可重入的判断 synchronized (this) { if (lockCount.get() == 0) { thread = Thread.currentThread(); lockCount.incrementAndGet(); } else { if (!thread.equals(Thread.currentThread())) { ## 本线程是否已经占有锁 return false; } lockCount.incrementAndGet(); return true; } } //.... } 羊群效应 优化 [1]&#xD;#&#xD;参考&#xD;#&#xD;《从Paxos到Zookeeper分布式一致性原理与实践》 倪超 6.1.7节 Zookeeper 分布式锁 （图解+秒懂+史上最全） *** 分布式锁（一）基于Zookeeper实现可重入分布式锁 * </description>
    </item>
    <item>
      <title>Zookeeper-总结</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/%E5%85%B6%E4%BB%96/zookeeper/</link>
      <pubDate>Thu, 26 Mar 2015 22:22:29 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/%E5%85%B6%E4%BB%96/zookeeper/</guid>
      <description>&#xA;读/写流程 [1]&#xD;#&#xD;写流程&#xD;#&#xD;写Leader 写Follower/Observer 将写请求转发给Leader处理 读流程&#xD;#&#xD;Leader/Follower/Observer都可直接处理读请求，从本地内存中读取数据并返回给客户端即可。 应用场景 [2]&#xD;#&#xD;元数据管理&#xD;#&#xD;Dubbo， HBase&#xA;分布式协调&#xD;#&#xD;kafka controller&#xA;Master选举 -&amp;gt; HA架构&#xD;#&#xD;HDFS NameNode HA&#xA;分布式锁&#xD;#&#xD;案例比较少&#xA;实现高可用 [2]&#xD;#&#xD;主备切换&#xD;#&#xD;集群选举&#xD;#&#xD;最小节点获胜 抢建唯一节点 法官判决 参考&#xD;#&#xD;深入浅出Zookeeper（一） Zookeeper架构及FastLeaderElection机制 *** 浅析如何基于ZooKeeper实现高可用架构｜得物技术 ZooKeeper 核心通识 未 </description>
    </item>
  </channel>
</rss>
