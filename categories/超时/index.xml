<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>超时 on Hugo Book</title>
    <link>http://localhost:1313/categories/%E8%B6%85%E6%97%B6/</link>
    <description>Recent content in 超时 on Hugo Book</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 17 Jan 2016 12:23:58 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/%E8%B6%85%E6%97%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>超时和重试 总结</title>
      <link>http://localhost:1313/docs/serviceGovernance/faultTolerant/faultTolerant/soaTimeout/</link>
      <pubDate>Sun, 17 Jan 2016 12:23:58 +0000</pubDate>
      <guid>http://localhost:1313/docs/serviceGovernance/faultTolerant/faultTolerant/soaTimeout/</guid>
      <description>&#xA;关键词： 超时, 降级, 重试&#xA;超时 和 重试&#xD;#&#xD;超时和延迟的原因: 服务端获得请求了，但超时了; 服务端没获得请求，请求失败了， 超时了; 重试方式: 指数级退避 Exponential Blackoff[3][4] 超时类型&#xD;#&#xD;类型 客户端调用超时 服务器端调用超时 提供端/消费端与注册中心之间超时 超时后策略&#xD;#&#xD;超时后策略 超时+快速失败 超时后不重试 超时+降级failback 返回托底（返回历史数据/静态数据/缓存数据）数据，等待页或者错误页 超时+熔断 超时后重试，重试不行后熔断服务 降级&#xD;#&#xD;降级 非核心服务在超时后可以自动降级 超时时间和超时重试次数 最佳实践&#xD;#&#xD;最佳实践 不设置超时 慢请求累积导致连锁反应，甚至造成应用雪崩 推荐值 稍大于压测或者线上监控看到的TP99的响应时间 超时时间太长-不恰当设置 导致本应成功的调用却失败了。超时的时候服务资源没有释放 超时时间太短- 不恰当设置 服务调用成功率降低 最重要：网络连接/读/写的超时 用户能忍受的最长超时时间 - 用户体验 最坏情况下的响应时间=重试次数*单次超时时间 依赖 service重启时大量超时的问题 服务预热功能。延迟发布 客户端的超时时间&amp;lt;服务端的超时 可以在服务端实施限流/降级 多级依赖关系 如A调用B，B调用C 超时设置应该是A&amp;gt;B&amp;gt;C,否则可能会一直重试，引起DDos攻击效果 重试&#xD;#&#xD;重试 客户端 心跳超时 关闭链路，然后由客户端发起重新连接的操作，保证链路能恢复到正常的状态 有负载均衡的中间件，要考虑配置心跳/存活检查 客户端调用超时 重试策略,保证服务调用成功 - failover 摘掉不存活节点 尝试其他分组服务 尝试其他机房服务 服务端 读服务天然适合重试 写服务大多不能重试 幂等 Zookeeper客户端会话超时 - 服务注册反注册 Zookeeper服务端，将该会话对应的Node删除，删除事件通知到所有监听该Node的消费者 重试次数太多 导致多倍请求流量，模拟了DDos攻击 参考&#xD;#&#xD;《亿级流量网站架构核心技术》 张开涛 Hedwig文档 网络重试中的 指数退避抖动 算法 Exponential Backoff And Jitter AWS 中的错误重试和指数退避 </description>
    </item>
  </channel>
</rss>
