<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>缓存 on 中间件</title>
    <link>https://www6v.github.io/www6vMiddleware/categories/%E7%BC%93%E5%AD%98/</link>
    <description>Recent content in 缓存 on 中间件</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 25 May 2021 15:06:33 +0000</lastBuildDate>
    <atom:link href="https://www6v.github.io/www6vMiddleware/categories/%E7%BC%93%E5%AD%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>缓存 一致性</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/Redis&#43;%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98/cacheConsistent/</link>
      <pubDate>Tue, 25 May 2021 15:06:33 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/Redis&#43;%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98/cacheConsistent/</guid>
      <description>关键词&#xD;#&#xD;失效策略(缓存更新)、 缓存与数据库的一致性&#xA;失效策略(缓存更新) [9]&#xD;#&#xD;Read/Write Through模式&#xD;#&#xD;Read Through : 被动失效 Write Through ： 主动失效&#xA;Cache Aside 模式&#xD;#&#xD;Cache Aside 模式和上面的 Read/Write Through 模式非常像，它们处理读请求的逻辑是完全一样的，唯一的一个小差别就是，Cache Aside 模式在更新数据的时候，并不去尝试更新缓存，而是去删除缓存。 普遍使用这种方式&#xA;场景： 订单服务收到更新数据请求之后，先更新数据库，如果更新成功了，再尝试去删除缓存中订 单，如果缓存中存在这条订单就删除它，如果不存在就什么都不做，然后返回更新成功。这 条更新后的订单数据将在下次被访问的时候加载到缓存中。使用 Cache Aside 模式来更新 缓存，可以非常有效地避免并发读写导致的脏数据问题。&#xA;Write Behind模式&#xD;#&#xD;linux page cache: dirty page刷盘。 kafka使用page cache异步刷盘。&#xA;失效策略&#xD;#&#xD;失效策略 被动失效 有空窗期问题 主动更新【1】 无空窗期问题 有并发更新问题。并发写，数据覆盖一致性问题【2】 锁控制,少有这样做的 客户端读写锁 服务端加锁 版本控制 单版本机制【3】 多版本机制 类似向量时钟， NoSQL使用 消息机制【3,4】 增量db数据通过消息来异步变更缓存的数据 缓存的应用模式&#xD;#&#xD;缓存的应用模式 Cache-Aside 业务代码直接维护缓存 有并发更新问题【2】 Cache-As-SoR Read-Through Write-Through 同步写 Write-Behind 异步写 Cache与数据库的一致性&#xD;#&#xD;Cache与数据库的一致性 读操作 先读缓存，再读数据库 写操作 先写数据库，在写缓存 缓存与数据库的数据同步 一致性&#xD;#&#xD;在应用层， 可以根据业务场景对一致性的要求不同， 给数据分配不同的队列，即 一致性分级队列。 强一致性的场景如自己发布的评论， 自己应该及时看到。 而别人看到我的评论属于会话一致性， 一致性要求比较弱。 这样可以把一致性要求高的业务分配更多资源， 做到快速同步。</description>
    </item>
    <item>
      <title>多级缓存(cache)</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/Redis&#43;%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98/cacheMultiLayer/</link>
      <pubDate>Sat, 25 May 2019 14:08:00 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/Redis&#43;%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98/cacheMultiLayer/</guid>
      <description>Overview&#xD;#&#xD;多级缓存 [5?]&#xD;#&#xD;二级缓存（本地缓存+远程缓存）&#xD;#&#xD;二级缓存（本地缓存+远程缓存） 远端Cache推全量或者部分的数据到本地cache，并设置过期时间【初始化】 查询流程 先从本地缓存拿，如果有数据且有效，就直接返回 如果没有命中 1.本地查询远端服务，并拿到结果 2.本地更新远端缓存 3.更新本地缓存 本地cache失效+更新流程,本地防穿透【1】 同步更新缓存 访问同一个key的业务线程只有一个线程穿透到远端Cache，其他线程等待穿透线程的返回结果[加锁] 异步更新缓存 1.过期时间到了后，产生过期事件，延长数据有效期，返回旧的数据 检查过期事件，后台线程池更新缓存数据，并重新设置有效时间 eg. Google LoadingCache 以上两种方式都有 远端cache，防穿透 远端cache访穿透采用永久缓存数据，每次查询都能查到值. 通过辅助信息判断逻辑过期, 再从远端服务异步拉数据刷新远端cache。 多级缓存查询 [2]&#xD;#&#xD;多级缓存更新 [2]&#xD;#&#xD;缓存分层 多级缓存&#xD;#&#xD;边缘cache&#xD;#&#xD;可用CDN实现，往往是服务器端缓存，存静态数据。 可以存Html页面， 脚本， 样式， 图片，页面片段等。&#xA;页面级缓存&#xD;#&#xD;往往是本地缓存， 数据相对动态。&#xA;计算结果的缓存&#xD;#&#xD;可以存储索引聚合数据，比如 BI里的数据聚合表。也可以存储耗时查询数据 ，比如搜索的结果。也可以存储业务相关数据， 比如对象模型的有向图可以整个缓存起来。在微博系统中，所有@你的微博是相对耗时， 可以 考虑作为逻辑缓存。&#xA;数据源级缓存： 缓存数据源结果集&#xD;#&#xD;比如Hibernate缓存中的QueryCache用来缓存查询语句, 及查询结果集中对象的Id与Type. 当再次使用已缓存的Query时, 就可以通过对象的Id与Type在二级缓存中查找实际的对象.&#xA;Hibernate提供了短生命周期的缓存， 也叫事务级别的缓存。长生命周期的缓存，也叫应用级别的缓存。&#xA;缓存分层之间的失效方式： 1. 映射关系 2.</description>
    </item>
    <item>
      <title>缓存(cache)总结</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/Redis&#43;%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98/cacheSummary/</link>
      <pubDate>Sun, 21 Jan 2018 09:59:17 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/Redis&#43;%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98/cacheSummary/</guid>
      <description>&#xA;总结&#xD;#&#xD;参考&#xD;#&#xD;应用系统数据缓存设计 淘宝技术部 *** 失效 Local Cache的小TIP 阿里 放翁（文初） xxx xxx xxx xxx cache 58沈剑 </description>
    </item>
    <item>
      <title>缓存(cache)机制</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/Redis&#43;%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98/cache/</link>
      <pubDate>Thu, 07 Dec 2017 09:58:48 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/Redis&#43;%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98/cache/</guid>
      <description>缓存数据分布模式&#xD;#&#xD;分片模式 （sharding）&#xD;#&#xD;数据正交分散到大量机器， 可以做到线性的可伸缩性， 但是实现可用性比较困难。还有一个好处是可以通过集群做负载均衡来实现数据的管理。 根据CAP理论， 在高可用的场景下， 数据分区的容忍性需要牺牲一定的一致性。 相应各个副本的同步策略也有不同， 主要可分为同步和异步方式。由客户端做一致性hash把数据分片存放到服务端。&#xA;复制模式&#xD;#&#xD;数据在集群中存在多个副本。 在本地缓存的集群中，数据会复制到所有的节点中，没有网络延迟和等待时间的集群成员都是可用的。 多副本通过低延迟访问来提供高性能。 在修改数据时需要复制新的版本数据到所有的副本， 在高并发修改的场景下会限制系统的可伸缩性， 副本数不会调的太高。&#xA;本地缓存&#xD;#&#xD;在同一机房内的， 需要适量考虑本地cache， 数据压缩传输等以节省内网数据传输量 。 跨机房的缓存有地域区分，用户往往访问同一机房， 这样可以做本地的cache。 机房之间通过队列的方式进行异步和压缩传输，以提高用户请求的相应度。&#xA;缓存与场景&#xD;#&#xD;1. 非共性数据缓存 eg. 微博， 博客个人首页&#xD;#&#xD;问题：缓存所有的数据性价比不高，　命中率不高 解决方案：&#xA;I. 热点缓存。&#xD;#&#xD;只缓存那些热点的数据。可以缓存在线的用户，　缓存热销的商品，　缓存热点用户的数据。热点规则表示如何匹配到一个热点，即这个查询请求是否请求了热点数据。 根据2/8原则，小部分的数据占用了大部分的访问量。 这也就是twitter page cache 是40%，而不是90%的原因。 II. 非热点数据，&#xD;#&#xD;可以采用nosql技术（redies），可以把它看成可持久化的缓存。 原理类似虚拟内存，理论上不受内存大小的限制。使用NoSQL来做缓存，我们可以把一些不常访问、不怎么更新的数据也缓存起来。比如论坛、新闻的老数据、数据列表的靠后的页面，虽然用户访问不多，但是搜索引擎爬虫会访问，也可能导致系统负载上升。 从外存拿数据减少了计算的开销 ，由于其数据库结构的简单，从磁盘获取一次数 据也比从数据库一次耗时的查询划算很多。&#xA;III. read-only缓存&#xD;#&#xD;缓存是read-only的， 如果有cache数据的更新， 把cache置为失效的。 如果有多个副本，这样做能够减少replication更新数据的开销， 只需要发送置失效的消息即可。&#xA;2. 高并发更新场景&#xD;#&#xD;I.</description>
    </item>
  </channel>
</rss>
