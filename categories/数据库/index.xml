<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据库 on 中间件</title>
    <link>https://www6v.github.io/www6vMiddleware/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <description>Recent content in 数据库 on 中间件</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 15 Aug 2023 12:42:56 +0000</lastBuildDate>
    <atom:link href="https://www6v.github.io/www6vMiddleware/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL 事务-隔离性</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/RMDB/%E5%8D%95%E6%9C%BA/mysqlTransactionAndLock/</link>
      <pubDate>Fri, 14 Aug 2020 17:22:20 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/RMDB/%E5%8D%95%E6%9C%BA/mysqlTransactionAndLock/</guid>
      <description>MyISAM vs. InnoDB&#xD;#&#xD;描述 MyISAM InnoDB 行锁(并发高，会死锁) × √ (默认支持)&#xA;Record lock: 锁记录&#xA;Gap lock: 锁范围，不锁记录&#xA;Next-key lock： 锁范围+锁记录 表锁(并发低，不会死锁) √ √ 事务和崩溃恢复 × √ 外键 × √ MVCC × √ 在READ COMMITTED 和 REPEATABLE READ时有效 事务隔离级别 [4]&#xD;#&#xD;隔离级别(从高到低) 脏读 不可重复读&#xA;（重点是修改） 幻影读&#xA;（重点是新增或者删除） SERIALIZABLE × × × REPEATABLE-READ&#xA;（InnoDB默认隔离级别） × × √ READ-COMMITTED × √ √ READ-UNCOMMITTED √ √ √ innodb对于行的查询使用next-key lock Next-locking keying、Gap锁为了解决Phantom Problem幻读问题 当查询的索引含有唯一属性时(单条记录)，将next-key lock降级为record key</description>
    </item>
    <item>
      <title>MySQL中的SQL更新语句</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/RMDB/%E5%8D%95%E6%9C%BA/mysqlUpdate/</link>
      <pubDate>Fri, 26 Jun 2020 13:41:44 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/RMDB/%E5%8D%95%E6%9C%BA/mysqlUpdate/</guid>
      <description>&#xA;redo log &amp;amp;&amp;amp; bin log&#xD;#&#xD;有了redo log，InnoDB就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个 能力称为crash-safe。&#xA;\ redo log bin log where InnoDB引擎特有的 MySQL的Server层实现的 what 物理日志，记录的是“在某个数据页上做了什么修改” 逻辑日志，记录的是这个语句的原始逻辑 how 循环写的 追加写入的 update in Mysql&#xD;#&#xD;MySQL里的WAL(Write-Ahead Logging)技术，它的关键点就是先写日志，再写磁盘.&#xA;更新流程还涉及两个重要的日志模块，redo log（重做日志）和 binlog（归档日志）。&#xA;图中浅色框表示是在InnoDB内部执行的，深色框表示是在执行器中执行的。&#xA;redo log的写入拆成了两个步骤：prepare和commit，这就是&amp;quot;两阶段提交&amp;quot;, 让redo log和bin log之间的逻辑一致。&#xA;参考&#xD;#&#xD;《MySQL实战45讲 - 日志系统：一条SQL更新语句是如何执行的？》 丁奇 </description>
    </item>
    <item>
      <title>MySQL的主从 高可用 容灾</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/RMDB/%E5%8D%95%E6%9C%BA/mysqlReliability/</link>
      <pubDate>Sun, 21 Jun 2020 18:14:49 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/RMDB/%E5%8D%95%E6%9C%BA/mysqlReliability/</guid>
      <description>MySQL主从复制原理&#xD;#&#xD;主从复制-流程&#xD;#&#xD;MySQL主从复制&#xA;MySQL master 将数据变更写入二进制日志( binary log, 其中记录叫做二进制日志事件binary log events，可以通过 show binlog events 进行查看) MySQL slave 将 master 的 binary log events 拷贝到它的中继日志(relay log) MySQL slave 重放 relay log 中事件，将数据变更反映它自己的数据 主从复制-类型 [6]&#xD;#&#xD;异步复制 半同步复制 MHA + 半同步复制 全同步复制 MGR + 全同步 主备切换 [1]&#xD;#&#xD;因为readonly设置对超级(super)权限用户是无效的，而用于同步更新的线程，就拥有超级权限。&#xA;一个事务日志同步的完整过程是这样的： 在备库B上通过change master命令，设置主库A的IP、端口、用户名、密码，以及要从哪个 位置开始请求binlog，这个位置包含文件名和日志偏移量。 在备库B上执行start slave命令，这时候备库会启动两个线程，就是图中的io_thread和 sql_thread。其中io_thread负责与主库建立连接。 主库A校验完用户名、密码后，开始按照备库B传过来的位置，从本地读取binlog，发给B。 备库B拿到binlog后，写到本地文件，称为中转日志（relay log）。 sql_thread读取中转日志，解析出日志里的命令，并执行。 Master-Master(双M)循环复制问题 [1]&#xD;#&#xD;如果设置了双M结构，日志的执行流就会变成这样： 从节点A更新的事务，binlog里面记的都是A的server id； 传到节点B执行一次以后，节点B生成的binlog 的server id也是A的server id； 再传回给节点A，A判断到这个server id与自己的相同，就不会再处理这个日志。所以，死循 环在这里就断掉了。 主备延迟 [2]&#xD;#&#xD;主备延迟原因 备库所在机器的性能要比主库所在的机器性能差 备库的压力大 解决方案: I.</description>
    </item>
    <item>
      <title>MySQL的索引和优化</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/RMDB/%E5%8D%95%E6%9C%BA/mysqlIndex/</link>
      <pubDate>Tue, 10 Sep 2019 16:02:39 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/RMDB/%E5%8D%95%E6%9C%BA/mysqlIndex/</guid>
      <description>索引-结构&#xD;#&#xD;索引分类[7]&#xD;#&#xD;分类 含义 特点 关键字 主键索引 针对于表中主键创建的索引 默认自动创建，只能有一个 PRIMARY 唯一索引 避免同一个表中某数据列中的值重复 可以有多个 UNIQUE 常规索引 快速定位特定数据 可以有多个 全文索引 全文索引查找的是文本中的关键词，而不是比较索引中的值 可以有多个 FULLTEXT 分类 含义 特点 聚集索引(Clustered Index) 将数据存储与索引放一块，索引结构的叶子节点保存了行数据 必须有，而且只有一个 二级索引(Secondary Index) 将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键 可以存在多个 聚集索引选取规则: 如果存在主键，主键索引就是聚集索引 如果不存在主键，将使用第一个唯一（UNIQUE）索引作为聚集索引。 如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索 引。 索引结构和存储引擎 [3]&#xD;#&#xD;索引的数据结构： B+树能够很好地配合磁盘的读写特性，减少单次查询的磁盘访问次数&#xA;index MyISAM InnoDB Memory B-Tree&#xA;（balanced 平衡的） 支持 支持 支持 Hash 不支持 不支持 支持 R-Tree 空间索引 支持 不支持 不支持 Full-text 支持 支持 不支持 复合索引的数据结构&#xD;#&#xD;create table people {&#xD;last_name,&#xD;first_name,&#xD;dob,&#xD;gender,&#xD;key(last_name, first_name, dob)&#xD;} 索引- 使用&#xD;#&#xD;索引的使用场景&#xD;#&#xD;索引的使用场景 例子 匹配全值 index (a,b,c) a=1 and b=2 and c=3 范围查找 index a&amp;gt;1 and b&amp;lt;3 匹配最左前缀 index(a，b，c) a OR a，b OR a、b、c OR a，c 会使用 b、c 不使用 仅对索引列进行查询（覆盖索引） index a a=1 匹配列前缀 index （a， b） a like &amp;lsquo;WEER%&amp;rsquo; Index Condition Pushdown（ICP） 减少回表IO 索引的失效 [12][7]&#xD;#&#xD;非复合索引</description>
    </item>
    <item>
      <title>MySQL事务-总结</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/RMDB/%E5%8D%95%E6%9C%BA/mysqlTransaction/</link>
      <pubDate>Sat, 21 Feb 2015 14:44:33 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/RMDB/%E5%8D%95%E6%9C%BA/mysqlTransaction/</guid>
      <description>&#xA;MySQL Log和事务&#xD;#&#xD;{% post_link &amp;lsquo;mysqlLog&amp;rsquo; %}&#xA;参考&#xD;#&#xD;拨开云雾见天日：剖析单机事务原理 CHEN川 *** 多版本并发控制(MVCC)在分布式系统中的应用 Todd 阿里云分布式缓存OCS与DB之间的数据一致性 杨成虎 乐观锁和 MVCC 的区别？ mysql可重复读和幻读实例 CWeeYii MySQL脏读、虚读、幻读 Eternity味道 MySQL 中事务的实现原理 失效 </description>
    </item>
    <item>
      <title>MySQL Logs</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/RMDB/%E5%8D%95%E6%9C%BA/mysqlLog/</link>
      <pubDate>Sun, 27 Feb 2022 22:25:29 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/RMDB/%E5%8D%95%E6%9C%BA/mysqlLog/</guid>
      <description>MySQL Log和事务[0]&#xD;#&#xD;redo log&#xD;#&#xD;有了redolog之后，当对缓冲区的数据进行增删改之后，会首先将操作的数据页的变化，记录在redo log buffer中。在事务提交时，会将redo log buffer中的数据刷新到redo log磁盘文件中。过一段时间之后，如果刷新缓冲区的脏页到磁盘时，发生错误，此时就可以借助于redo log进行数据恢复，这样就保证了事务的持久性。 因为在业务操作中，我们操作数据一般都是随机读写磁盘的，而不是顺序读写磁盘。 而redo log在往磁盘文件中写入数据，由于是日志文件，所以都是顺序写的。顺序写的效率，要远大于随机写。 这种先写日志的方式，称之为** WAL（Write-Ahead Logging）**。 undo log&#xD;#&#xD;回滚日志，用于记录数据被修改前的信息 , 作用包含两个 : **提供回滚(保证事务的原子性) 和MVCC(多版本并发控制) **。&#xA;undo log和redo log记录物理日志不一样，它是逻辑日志。可以认为当delete一条记录时，undolog中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的update记录。&#xA;总结&#xD;#&#xD;Log 性质 记录内容 ACID redo log 物理日志[记录内容] wal 保证事务的持久性[D] undo log 物理日志[记录内容] 被修改前的信息，提供回滚 保证事务的原子性[A] ​ binlog 逻辑日志[记录操作]&#xA;MySQL Log和可靠性&#xD;#&#xD;binlog的三种格式[1]&#xD;#&#xD;statement&#xA;row格式&#xA;mixed格式: statement or row格式&#xA;因为有些statement格式的binlog可能会导致主备不一致，所以要使用row格式。 但row格式的缺点是，很占空间。比如你用一个delete语句删掉10万行数据，用statement的话就是一个SQL语句被记录到binlog中，占用几十个字节的空间。但如果用row格式的binlog，就要把这10万条记录都写到binlog中。这样做，不仅会占用更大的空间，同时写binlog也要耗费IO资源，影响执行速度。 所以，MySQL就取了个折中方案，也就是有了mixed格式的binlog。mixed格式的意思是，MySQL自己会判断这条SQL语句是否可能引起主备不一致，如果有可能，就用row格式，否则就用statement格式。 也就是说，mixed格式可以利用statment格式的优点，同时又避免了数据不一致的风险.因此，如果你的线上MySQL设置的binlog格式是statement的话，那基本上就可以认为这是一个不合理的设置。你至少应该把binlog的格式设置为mixed。&#xA;redo log 和 undo log [4]&#xD;#&#xD;redo Log</description>
    </item>
    <item>
      <title>MySQL  锁和死锁</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/RMDB/%E5%8D%95%E6%9C%BA/mysqlDeadLock/</link>
      <pubDate>Tue, 15 Aug 2023 12:42:56 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/RMDB/%E5%8D%95%E6%9C%BA/mysqlDeadLock/</guid>
      <description>锁&#xD;#&#xD;行锁， 锁优化 [3]&#xD;#&#xD;在InnoDB事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。 知道了这个设定，对我们使用事务有什么帮助呢？那就是，如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放.[todo 加个例子]&#xA;行锁是通过索引实现的，如果不通过索引条件检索数据，那么 InnoDB 将对表中所有的记录进行加锁。&#xA;行锁的具体实现算法有三种：record lock、gap lock 以及 next-key lock。&#xA;record lock是专门对索引项加锁； gap lock 是对索引项之间的间隙加锁； next-key lock 则是前面两种的组合，对索引项以其之间的间隙加锁。 只在可重复读或以上隔离级别下的特定操作才会取得 gap lock 或 next-key lock，在Select 、Update 和 Delete 时，除了基于唯一索引的查询之外，其他索引查询时都会获取gap lock 或 next-key lock，即锁住其扫描的范围。 隐式锁和显示锁&#xD;#&#xD;显示锁 SELECT &amp;hellip; LOCK IN SHARE MODE(加共享锁); SELECT &amp;hellip; FOR UPDATE(加排他锁);&#xA;死锁&#xD;#&#xD;死锁和死锁检测 [5]&#xD;#&#xD;当出现死锁以后，有两种策略：&#xA;一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数 innodb_lock_wait_timeout来设置。 innodb_lock_wait_timeout的默认值是50s。 实际中不用这种策略。&#xA;另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事 务得以继续执行。将参数 innodb_deadlock_detect 设置为on，表示开启这个逻辑。&#xA;带来的问题：每个新来的被堵住的线程，都要判断会不会由于自己的加入导致了死锁，这是一个时间复杂度是O(n)的操作。假设有1000个并发线程要同时更新同一行，那么死锁检测操作就是100万这个量级的。虽然最终检测的结果是没有死锁，但是这期间要消耗大量的CPU资源。&#xA;一种解决思路是控制并发度：并发控制要做在数据库服务端。如果有中间件，可以考虑在中间件实现；如果-团队有能修改MySQL源码的人，也可以做在MySQL里面。基本思路就是，对于相同行的更新，-在进入引擎之前排队。这样在InnoDB内部就不会有大量的死锁检测工作了。</description>
    </item>
    <item>
      <title>MySQL 主从延迟</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/RMDB/%E5%8D%95%E6%9C%BA/mysqlMasterSlaveDelay/</link>
      <pubDate>Tue, 16 Aug 2022 16:01:58 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/RMDB/%E5%8D%95%E6%9C%BA/mysqlMasterSlaveDelay/</guid>
      <description>&#xA;案例 [1]&#xD;#&#xD;案例一：主库DML请求频繁&#xD;#&#xD;解决思路 如果是MySQL 5.7以下的版本，可以做分片(sharding)，通过水平扩展(scale out)的方法打散写请求，提升写请求写入binlog的并行度。 MySQL 5.7以上的版本， 在MySQL 5.7，使用了基于逻辑时钟(Group Commit)的并行复制。 而在MySQL 8.0，使用了基于Write Set的并行复制。 案例二：主库执行大事务&#xD;#&#xD;解决思路 拆分大事务语句到若干小事务中，这样能够进行及时提交，减小主从复制延时。 案例三：主库对大表执行DDL语句&#xD;#&#xD;解决思路 避免业务高峰，尽量安排在业务低峰期执行 ； set sql_log_bin=0后，分别在主从库上手动执行DDL（此操作对于某些DDL操作会造成数据不一致，请务必严格测试） 参考&#xD;#&#xD;高可用数据库主从复制延时的解决方案 《26 | 备库为什么会延迟好几个小时？》 未 </description>
    </item>
  </channel>
</rss>
