<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>容错 on Hugo Book</title>
    <link>http://localhost:1313/categories/%E5%AE%B9%E9%94%99/</link>
    <description>Recent content in 容错 on Hugo Book</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 07 Oct 2016 06:40:26 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/%E5%AE%B9%E9%94%99/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>容错框架</title>
      <link>http://localhost:1313/docs/serviceGovernance/faultTolerant/faultTolerant/soaTolerateFramework/</link>
      <pubDate>Fri, 07 Oct 2016 06:40:26 +0000</pubDate>
      <guid>http://localhost:1313/docs/serviceGovernance/faultTolerant/faultTolerant/soaTolerateFramework/</guid>
      <description>&#xA;Hystrix实现和容错模式&#xD;#&#xD;Hystrix实现和容错模式 熔断【熔断器模式】 三个状态 开 闭 半开 模块 熔断请求判断机制算法 维护10个bucket,每秒一个bucket,每个blucket记录成功,失败,超时,拒绝的状态。 超时【超时与重试模式】 失败（异常） 成功 拒绝 线程池拒绝【1】 信号量拒绝【2】 默认错误超过50%且10秒内超过20个请求进行中断拦截 熔断恢复 每隔5s允许部分请求通过，若请求都是健康的（RT&amp;lt;250ms）则对请求健康恢复 熔断报警和Metric上报 流控【限流模式】 控制速率 控制并发 隔离【舱壁隔离模式】 Hystrix实现 线程池隔离 【1】 信号量隔离【2】 回退【回退模式】 快速失败（Fail Fast ） 无声失败（Fail Silent ） 返回默认值（Fallback Static ） Resilience4j [1]&#xD;#&#xD;断路器（Circuit Breaker） 重试（Retry） 限时器（Time Limiter） 限流器（Rate Limiter） 隔板（BulkHead） 参考&#xD;#&#xD;Hystrix&#xD;#&#xD;微服务熔断与隔离 楚岩 Hystrix技术解析 王新栋 &amp;laquo;亿级流量网站架构核心技术&amp;raquo; 5.8节 张开涛 Hystrix 使用与分析 zhangyijun Resilience4j&#xD;#&#xD;Resilience4j 比 Hystrix 好在哪里？ </description>
    </item>
    <item>
      <title>分布式服务框架 容错机制</title>
      <link>http://localhost:1313/docs/serviceGovernance/faultTolerant/faultTolerant/soaTolerate/</link>
      <pubDate>Wed, 17 Jun 2015 17:08:05 +0000</pubDate>
      <guid>http://localhost:1313/docs/serviceGovernance/faultTolerant/faultTolerant/soaTolerate/</guid>
      <description>&#xA;关键词： 容错, 降级, 隔离, 超时, 重试, 高可用, 监控, 开关&#xA;Overview&#xD;#&#xD;超时重试机制[self 1][self 2] 限流 熔断机制 隔离 降级（本地缓存） 流量调度、负载均衡 微服务熔断与隔离 降级&#xD;#&#xD;降级策略 场景 实现 降低一致性约束 [1] 关闭非核心业务 人工开关 （非核心服务）, 强制降级,简化功能 开关存放位置:配置文件,数据库, Redis/Zk 关闭非核心业务 自动开关(非核心服务), 超时降级 1. 统计失败次数降级-不稳定的api&#xA;2. 限流降级-大促秒杀&#xA;3. 实现-熔断器 超时和重试 Retry&#xD;#&#xD;超时和重试 网络连接/读/写的超时时间（重要） 服务 读服务 - 可重试 写服务 - 幂等可重试 服务 客户端超时与重试 服务端超时 - 业务超时 任务型 服务调用型 超时后策略 failover 其它分组 其它机房 failcache 托底默认数据 等待页/错误页 降级 超时时间 太短 调用成功率降低 太长 后续正常请求挤压 经验值 稍微大于tp99的响应时间 集群容错&#xD;#&#xD;集群容错 Fail over（重试其他节点） 超时异常 Fail fast（快速失败） Fail cache（重试故障节点）（hedwig） 网路异常 Fail back（回退） 隔离 BulkHead&#xD;#&#xD;隔离 线程池隔离(hystirx) vm隔离（资源隔离） 物理机隔离 集群隔离 分组隔离 机房隔离 框架&#xD;#&#xD;框架 淘宝Dubbo 一号店Hedwig 京东JSF 点评pegion 唯品会OSP 状态监测&#xD;#&#xD;状态监测 服务注册中心状态监测（hedwig） 服务提供者和消费者之间的链路有效性检测（pegion） 服务健康检查（打分） 反推回消费者的路由表 流量控制（算法） Rate Limiter&#xD;#&#xD;流量控制（算法）　限流算法 令牌桶（控制入口） 漏桶（控制出口） 计数器(hedwig) 接口的总请求数（hedwig客户端） 接口的时间窗口请求数（hedwig服务端） 平滑限流,整形（netty） 整体流控 静态流控(整体qps固定) 预先分配 动态配额分配置（推） 动态配额申请制（拉） 动态流控 分级流控-拒绝流量 连接控制 并发控制（线程的并发执行数） 参考&#xD;#&#xD;self&#xD;#&#xD;{% post_link &amp;lsquo;soaTolerate&amp;rsquo; %} self {% post_link &amp;lsquo;soaTimeout&amp;rsquo; %} self </description>
    </item>
  </channel>
</rss>
