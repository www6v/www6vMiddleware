<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>鉴权 on Hugo Book</title>
    <link>http://localhost:1313/categories/%E9%89%B4%E6%9D%83/</link>
    <description>Recent content in 鉴权 on Hugo Book</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 10 Aug 2022 09:29:10 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/%E9%89%B4%E6%9D%83/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>服务治理-鉴权</title>
      <link>http://localhost:1313/docs/serviceGovernance/security/soaAuth/</link>
      <pubDate>Wed, 10 Aug 2022 09:29:10 +0000</pubDate>
      <guid>http://localhost:1313/docs/serviceGovernance/security/soaAuth/</guid>
      <description>&#xA;备选方案 [1]&#xD;#&#xD;分布式 Session OAuth2.0 JWT CAS OAuth2 和 JWT的关系[gpt4]&#xD;#&#xD;OAuth2和JWT都是用于实现网络应用中的授权和身份验证的技术。但是，它们在实现方式和使用场景上有所不同。&#xA;OAuth2是一个授权框架，它允许第三方应用在用户的许可下访问其私有资源。例如，一个应用可以使用OAuth2获取用户的Facebook或Google账户信息，而无需用户提供他们的用户名和密码。&#xA;JWT（JSON Web Token）则是一种开放标准（RFC 7519），它定义了一种紧凑且自包含的方式，用于在各方之间安全地传输信息作为JSON对象。这些信息可以被验证和信任，因为它们是数字签名的。&#xA;OAuth2和JWT可以一起使用。例如，当一个应用使用OAuth2获取用户的授权时，它可能会接收到一个包含JWT的访问令牌。应用可以解码这个JWT，以获取关于用户的信息，如他们的用户名或电子邮件地址。同时，因为JWT是签名的，应用可以信任这些信息的准确性。&#xA;总的来说，OAuth2和JWT都是实现网络应用授权和身份验证的重要工具，但它们在实现细节和使用方式上有所不同。&#xA;参考&#xD;#&#xD;微服务之用户鉴权中心 {% post_link &amp;lsquo;securityOAuth2&amp;rsquo; %} self </description>
    </item>
  </channel>
</rss>
