<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>中间件</title>
    <link>https://www6v.github.io/www6vMiddleware/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
    <description>Recent content on 中间件</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 20 Jul 2022 14:30:49 +0000</lastBuildDate>
    <atom:link href="https://www6v.github.io/www6vMiddleware/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>缓存 一致性</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/Redis&#43;%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98/cacheConsistent/</link>
      <pubDate>Tue, 25 May 2021 15:06:33 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/Redis&#43;%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98/cacheConsistent/</guid>
      <description>关键词&#xD;#&#xD;失效策略(缓存更新)、 缓存与数据库的一致性&#xA;失效策略(缓存更新) [9]&#xD;#&#xD;Read/Write Through模式&#xD;#&#xD;Read Through : 被动失效 Write Through ： 主动失效&#xA;Cache Aside 模式&#xD;#&#xD;Cache Aside 模式和上面的 Read/Write Through 模式非常像，它们处理读请求的逻辑是完全一样的，唯一的一个小差别就是，Cache Aside 模式在更新数据的时候，并不去尝试更新缓存，而是去删除缓存。 普遍使用这种方式&#xA;场景： 订单服务收到更新数据请求之后，先更新数据库，如果更新成功了，再尝试去删除缓存中订 单，如果缓存中存在这条订单就删除它，如果不存在就什么都不做，然后返回更新成功。这 条更新后的订单数据将在下次被访问的时候加载到缓存中。使用 Cache Aside 模式来更新 缓存，可以非常有效地避免并发读写导致的脏数据问题。&#xA;Write Behind模式&#xD;#&#xD;linux page cache: dirty page刷盘。 kafka使用page cache异步刷盘。&#xA;失效策略&#xD;#&#xD;失效策略 被动失效 有空窗期问题 主动更新【1】 无空窗期问题 有并发更新问题。并发写，数据覆盖一致性问题【2】 锁控制,少有这样做的 客户端读写锁 服务端加锁 版本控制 单版本机制【3】 多版本机制 类似向量时钟， NoSQL使用 消息机制【3,4】 增量db数据通过消息来异步变更缓存的数据 缓存的应用模式&#xD;#&#xD;缓存的应用模式 Cache-Aside 业务代码直接维护缓存 有并发更新问题【2】 Cache-As-SoR Read-Through Write-Through 同步写 Write-Behind 异步写 Cache与数据库的一致性&#xD;#&#xD;Cache与数据库的一致性 读操作 先读缓存，再读数据库 写操作 先写数据库，在写缓存 缓存与数据库的数据同步 一致性&#xD;#&#xD;在应用层， 可以根据业务场景对一致性的要求不同， 给数据分配不同的队列，即 一致性分级队列。 强一致性的场景如自己发布的评论， 自己应该及时看到。 而别人看到我的评论属于会话一致性， 一致性要求比较弱。 这样可以把一致性要求高的业务分配更多资源， 做到快速同步。</description>
    </item>
    <item>
      <title>多级缓存(cache)</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/Redis&#43;%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98/cacheMultiLayer/</link>
      <pubDate>Sat, 25 May 2019 14:08:00 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/Redis&#43;%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98/cacheMultiLayer/</guid>
      <description>Overview&#xD;#&#xD;多级缓存 [5?]&#xD;#&#xD;二级缓存（本地缓存+远程缓存）&#xD;#&#xD;二级缓存（本地缓存+远程缓存） 远端Cache推全量或者部分的数据到本地cache，并设置过期时间【初始化】 查询流程 先从本地缓存拿，如果有数据且有效，就直接返回 如果没有命中 1.本地查询远端服务，并拿到结果 2.本地更新远端缓存 3.更新本地缓存 本地cache失效+更新流程,本地防穿透【1】 同步更新缓存 访问同一个key的业务线程只有一个线程穿透到远端Cache，其他线程等待穿透线程的返回结果[加锁] 异步更新缓存 1.过期时间到了后，产生过期事件，延长数据有效期，返回旧的数据 检查过期事件，后台线程池更新缓存数据，并重新设置有效时间 eg. Google LoadingCache 以上两种方式都有 远端cache，防穿透 远端cache访穿透采用永久缓存数据，每次查询都能查到值. 通过辅助信息判断逻辑过期, 再从远端服务异步拉数据刷新远端cache。 多级缓存查询 [2]&#xD;#&#xD;多级缓存更新 [2]&#xD;#&#xD;缓存分层 多级缓存&#xD;#&#xD;边缘cache&#xD;#&#xD;可用CDN实现，往往是服务器端缓存，存静态数据。 可以存Html页面， 脚本， 样式， 图片，页面片段等。&#xA;页面级缓存&#xD;#&#xD;往往是本地缓存， 数据相对动态。&#xA;计算结果的缓存&#xD;#&#xD;可以存储索引聚合数据，比如 BI里的数据聚合表。也可以存储耗时查询数据 ，比如搜索的结果。也可以存储业务相关数据， 比如对象模型的有向图可以整个缓存起来。在微博系统中，所有@你的微博是相对耗时， 可以 考虑作为逻辑缓存。&#xA;数据源级缓存： 缓存数据源结果集&#xD;#&#xD;比如Hibernate缓存中的QueryCache用来缓存查询语句, 及查询结果集中对象的Id与Type. 当再次使用已缓存的Query时, 就可以通过对象的Id与Type在二级缓存中查找实际的对象.&#xA;Hibernate提供了短生命周期的缓存， 也叫事务级别的缓存。长生命周期的缓存，也叫应用级别的缓存。&#xA;缓存分层之间的失效方式： 1. 映射关系 2.</description>
    </item>
    <item>
      <title>缓存(cache)总结</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/Redis&#43;%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98/cacheSummary/</link>
      <pubDate>Sun, 21 Jan 2018 09:59:17 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/Redis&#43;%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98/cacheSummary/</guid>
      <description>&#xA;总结&#xD;#&#xD;参考&#xD;#&#xD;应用系统数据缓存设计 淘宝技术部 *** 失效 Local Cache的小TIP 阿里 放翁（文初） xxx xxx xxx xxx cache 58沈剑 </description>
    </item>
    <item>
      <title>缓存(cache)机制</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/Redis&#43;%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98/cache/</link>
      <pubDate>Thu, 07 Dec 2017 09:58:48 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/Redis&#43;%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98/cache/</guid>
      <description>缓存数据分布模式&#xD;#&#xD;分片模式 （sharding）&#xD;#&#xD;数据正交分散到大量机器， 可以做到线性的可伸缩性， 但是实现可用性比较困难。还有一个好处是可以通过集群做负载均衡来实现数据的管理。 根据CAP理论， 在高可用的场景下， 数据分区的容忍性需要牺牲一定的一致性。 相应各个副本的同步策略也有不同， 主要可分为同步和异步方式。由客户端做一致性hash把数据分片存放到服务端。&#xA;复制模式&#xD;#&#xD;数据在集群中存在多个副本。 在本地缓存的集群中，数据会复制到所有的节点中，没有网络延迟和等待时间的集群成员都是可用的。 多副本通过低延迟访问来提供高性能。 在修改数据时需要复制新的版本数据到所有的副本， 在高并发修改的场景下会限制系统的可伸缩性， 副本数不会调的太高。&#xA;本地缓存&#xD;#&#xD;在同一机房内的， 需要适量考虑本地cache， 数据压缩传输等以节省内网数据传输量 。 跨机房的缓存有地域区分，用户往往访问同一机房， 这样可以做本地的cache。 机房之间通过队列的方式进行异步和压缩传输，以提高用户请求的相应度。&#xA;缓存与场景&#xD;#&#xD;1. 非共性数据缓存 eg. 微博， 博客个人首页&#xD;#&#xD;问题：缓存所有的数据性价比不高，　命中率不高 解决方案：&#xA;I. 热点缓存。&#xD;#&#xD;只缓存那些热点的数据。可以缓存在线的用户，　缓存热销的商品，　缓存热点用户的数据。热点规则表示如何匹配到一个热点，即这个查询请求是否请求了热点数据。 根据2/8原则，小部分的数据占用了大部分的访问量。 这也就是twitter page cache 是40%，而不是90%的原因。 II. 非热点数据，&#xD;#&#xD;可以采用nosql技术（redies），可以把它看成可持久化的缓存。 原理类似虚拟内存，理论上不受内存大小的限制。使用NoSQL来做缓存，我们可以把一些不常访问、不怎么更新的数据也缓存起来。比如论坛、新闻的老数据、数据列表的靠后的页面，虽然用户访问不多，但是搜索引擎爬虫会访问，也可能导致系统负载上升。 从外存拿数据减少了计算的开销 ，由于其数据库结构的简单，从磁盘获取一次数 据也比从数据库一次耗时的查询划算很多。&#xA;III. read-only缓存&#xD;#&#xD;缓存是read-only的， 如果有cache数据的更新， 把cache置为失效的。 如果有多个副本，这样做能够减少replication更新数据的开销， 只需要发送置失效的消息即可。&#xA;2. 高并发更新场景&#xD;#&#xD;I.</description>
    </item>
    <item>
      <title>Spring  Transaction  失效</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/Springcloud/springTransactionInvalid/</link>
      <pubDate>Wed, 20 Jul 2022 14:30:49 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/Springcloud/springTransactionInvalid/</guid>
      <description>&#xA;Spring事务失效问题&#xD;#&#xD;spring事务失效 [1]&#xD;#&#xD;- 场景：普通方法调用事务方法时，事务会失效 - 解决：要在普通方法(一般是最外层)上加上@Transactional 代理不生效 [2]&#xD;#&#xD;非public修饰的方法 在AbstractFallbackTransactionAttributeSource类的computeTransactionAttribute方法中有个判断，如果目标方法不是public，则TransactionAttribute返回null，即不支持事务。&#xA;被final、static关键字修饰的类或方法 spring事务底层使用了aop，也就是通过jdk动态代理或者cglib，帮我们生成了代理类，在代理类中实现的事务功能。但如果某个方法用final修饰了，那么在它的代理类中，就无法重写该方法，而添加事务功能。&#xA;类方法内部调用 updateStatus方法拥有事务的能力是因为spring aop生成代理了对象，但是这种方法直接调用了this对象的方法，所以updateStatus方法不会生成事务&#xA;解决方案 新加一个Service方法 在该Service类中注入自己 通过AopContent类 当前类没有被Spring管理&#xA;多线程调用 spring的事务是通过数据库连接来实现的。当前线程中保存了一个map，key是数据源，value是数据库连接。 同一个事务，其实是指同一个数据库连接，只有拥有同一个数据库连接才能同时提交和回滚。如果在不同的线程，拿到的数据库连接肯定是不一样的，所以是不同的事务。&#xA;(存储引擎)表不支持事务&#xA;未开启事务 springboot通过DataSourceTransactionManagerAutoConfiguration类，已经默默的帮你开启了事务。 使用的还是传统的spring项目，则需要在applicationContext.xml文件中，手动配置事务相关参数。如果忘了配置，事务肯定是不会生效的。&#xA;将注解标注在接口方法上&#xA;错误使用@Transactional [2]&#xD;#&#xD;错误的传播机制 目前只有这三种传播特性才会创建新事务：REQUIRED，REQUIRES_NEW，NESTED。&#xA;异常被内部catch 如果想要spring事务能够正常回滚，必须抛出它能够处理的异常。如果没有抛异常，则spring认为程序是正常的。&#xA;rollbackFor属性设置错误&#xA;@Transactional(rollbackFor = BusinessException.class) public void add(UserModel userModel) throws Exception { saveData(userModel); updateData(userModel); } 嵌套事务 可以将内部嵌套事务放在try/catch中，并且不继续往上抛异常。这样就能保证，如果内部嵌套事务中出现异常，只回滚内部事务，而不影响外部事务。&#xA;手动抛了别的异常&#xA;参考&#xD;#&#xD;Spring 踩坑之@Transactional 神奇失效 小鱼儿 spring事务（注解 @Transactional ）失效的12种场景 spring中12种@Transactional的失效场景(小结) Spring @Async/@Transactional 失效的原因及解决方案 未 </description>
    </item>
    <item>
      <title>负载均衡-算法</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/loadBalance/loadBalance/</link>
      <pubDate>Fri, 06 May 2022 11:29:37 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/loadBalance/loadBalance/</guid>
      <description>&#xA;负载均衡算法&#xD;#&#xD;LVS[1][2]&#xD;#&#xD;组件 类型 负载均衡算法 场景 LVS 静态 RR：roundrobin [常用] 轮询机制 WRR：Weighted RR [常用] 加权轮询，权重越大承担负载越大 SH：Source Hashing 源地址哈希 实现session sticky缺点：调度粒度大，对负载均衡效果差； DH：Destination Hashing 目标地址哈希 动态 LC：least connections 适用于长连接应用&#xA;Overhead=activeconns*256+inactiveconns WLC：Weighted LC [常用] 默认调度方法,较常用（加上了权重）&#xA;Overhead=(activeconns*256+inactiveconns)/weight SED：Shortest Expection Delay Overhead=(activeconns+1)*256/weight NQ：Never Queue， 第一轮均匀分配，后续SED****SED****算法改进 LBLC：Locality-Based LC 动态的 ****DH****连接算法 LBLCR：LBLC with Replication 带复制功能的LBLC Nginx [3]&#xD;#&#xD;组件 类型 负载均衡算法 场景 Nginx 静态 轮询 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除 加权轮询 指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况 IP Hash 每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题 动态 Fair （第三方） 按后端服务器的响应时间来分配请求，响应时间短的优先分配 url_hash（第三方） 按访问 url 的 hash 结果来分配请求，使每个 url 定向到同一个后端服务器，后端服务器为缓存时比较有效 Least Connections HAproxy&#xD;#&#xD;组件 类型 负载均衡算法 场景 HAproxy 静态 轮询 加权轮询 IP Hash 动态 Least Connections Source LVS工作模式[11-16]&#xD;#&#xD;DR TUN模式 NAT模式 参考&#xD;#&#xD;LVS负载均衡集群服务搭建详解 LVS调度算法总结 LVS、Nginx 及 HAProxy 的区别 LVS集群的负载调度 *** 未 LVS工作模式&#xD;#&#xD;LVS三种模式的区别及负载均衡算法 LVS 介绍以及配置应用 *** 深入浅出 LVS 负载均衡（一）NAT、FULLNAT 模型原理 未 深入浅出 LVS 负载均衡（二）DR、TUN 模型原理 未 深入浅出 LVS 负载均衡（三）实操 NAT、TUNNEL 模型 未 深入浅出 LVS 负载均衡（四）实操 DR 模型、Keepalived DR 模型的高可用 未 </description>
    </item>
    <item>
      <title>SpringCloud</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/Springcloud/springCloud/</link>
      <pubDate>Sun, 06 Jun 2021 16:07:33 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/Springcloud/springCloud/</guid>
      <description>参考&#xD;#&#xD;SpringCloud 面试题 （持续更新、吐血推荐）</description>
    </item>
    <item>
      <title>Nginx优化</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/loadBalance/nginxOptimize/</link>
      <pubDate>Thu, 26 Mar 2020 12:07:27 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/loadBalance/nginxOptimize/</guid>
      <description>Nginx 参数优化&#xD;#&#xD;反向代理&#xD;#&#xD;proxy_cache: 10M(重要) proxy_cache_path /data/nginx_cache/ levels=1:2 keys_zone=my_zone:10m inactive=300s max_size=5g; tls ssl&#xD;#&#xD;ssl_session_cache builtin:1000 shared:SSL:10m; /// 一天内连接上的用户， 不需要再协商秘钥 ssl_session_cache builtin:1000 shared:SSL:10m; /// 1m -&amp;gt; 4000个https连接 ssl_session_timeout 10m; /// 10分钟 ssl_protocols TLSv1.2; /// 版本号 非安全请求重定向&#xD;#&#xD;No redirect: 无重定向 Redirect： 301-302 -》 转到https站点 gzip&#xD;#&#xD;gzip on; gzip_comp_level 5; gzip_http_version 1.1; /// 注意：gzip 在1.1上有效， http2.0上是无效的 gzip_min_length 256; gzip_types application/atom+xml ... gzip_proxied any; gzip_vary on; worker&#xD;#&#xD;worker_connections 16384; /// 一个worker有 16384/2=8192 ‬个链接 .</description>
    </item>
    <item>
      <title>SpringBoot</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/Springcloud/springboot/</link>
      <pubDate>Fri, 20 Sep 2019 15:02:28 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/Springcloud/springboot/</guid>
      <description>Core&#xD;#&#xD;Spring Boot定义&#xD;#&#xD;Spring Boot is designed to get you up and running as quickly as possible, with minimal upfront configuration of Spring. Spring Boot takes an opinionated view of building production-ready applications.&#xA;Features (官方)&#xD;#&#xD;Create stand-alone Spring applications Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files) Provide opinionated &amp;lsquo;starter&amp;rsquo; dependencies to simplify your build configuration Automatically configure Spring and 3rd party libraries whenever possible Provide production-ready features such as metrics, health checks, and externalized configuration Absolutely no code generation and no requirement for XML configuration 特性&#xD;#&#xD;自动配置 Auto Configuration 为Spring及第三方库提供自动配置; 简化了项目的构建配置;</description>
    </item>
    <item>
      <title>Nginx总结</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/loadBalance/nginx/</link>
      <pubDate>Thu, 22 Aug 2019 02:17:53 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/loadBalance/nginx/</guid>
      <description>Nginx总结&#xD;#&#xD;Nginx架构&#xD;#&#xD;共享内存 Slab 分页 4K， 8K， 16K Nginx反向代理&#xD;#&#xD;类型&#xD;#&#xD;带权重的round-robin算法是基础 hash负载均衡算法 ip-hash算法 -&amp;gt; real-ip hash算法 -&amp;gt; 自定义可以hash的参数（比如?userName） 问题: 如果有upstream的机器宕机， hash算法还会路由到这台机器 解决方案：使用一致性hash(consistent),hash 环&#xA;least-connection算法， 如果所有节点的connection都一致， 会退化成为round-robin算法。 可扩展立方体&#xD;#&#xD;X-axis 基于round-robin或者least-connected算法分发请求 -&amp;gt; 相对简单 Y-axis 基于URL对功能进行分发。 -&amp;gt; 相对复杂 Z-axis 将用户IP地址或者其他信息映射到某个特定的服务或者集群 -&amp;gt; 相对简单 多种协议反向代理&#xD;#&#xD;tcp udp 透传 http -&amp;gt; memcached , scgi, fastcgi, uwsgi, grpc, http, websocket 反向代理流程&#xD;#&#xD;修改发送到upstream机器的请求的nginx指令。&#xA;节点热更新&#xD;#&#xD;master节点热更新&#xD;#&#xD;worker节点热更新&#xD;#&#xD;域名转发到其他域名[2]&#xD;#&#xD;return 指令 rewrite proxy_pass 文件下载&#xD;#&#xD;nginx.</description>
    </item>
    <item>
      <title>Spring事务</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/Springcloud/springTransaction/</link>
      <pubDate>Mon, 16 Mar 2015 14:52:34 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/Springcloud/springTransaction/</guid>
      <description>&#xA;三种事务模型&#xD;#&#xD;三种事务模型 本地事务模型 事务全部交给数据库来管理 编程式事务模型 事务的提交和回滚操作完全交给开发人员 TransactionTemplate TransactionCallback中执行业务代码 事务代码和业务代码可以实现分离的原理【1】 声明式事务模型【AOP】 事务的提交和回滚操作全部交给Spring来管理 事务拦截器TransactionInterceptor 事务管理器transactionManager【2】 事务配置的提供者transactionAttributes【3】&#xA;业务方法+传播属性 代理的对象target&#xA;业务对象 参考&#xD;#&#xD;分布式事务系列（1.1）Spring事务管理器PlatformTransactionManager 乒乓狂魔 分布式事务系列（1.2）Spring的事务体系 乒乓狂魔 </description>
    </item>
  </channel>
</rss>
