<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>中间件</title>
    <link>https://www6v.github.io/www6vMiddleware/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
    <description>Recent content on 中间件</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 20 Jul 2022 14:30:49 +0000</lastBuildDate>
    <atom:link href="https://www6v.github.io/www6vMiddleware/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring  Transaction  失效</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/Springcloud/springTransactionInvalid/</link>
      <pubDate>Wed, 20 Jul 2022 14:30:49 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/Springcloud/springTransactionInvalid/</guid>
      <description>&#xA;Spring事务失效问题&#xD;#&#xD;spring事务失效 [1]&#xD;#&#xD;- 场景：普通方法调用事务方法时，事务会失效 - 解决：要在普通方法(一般是最外层)上加上@Transactional 代理不生效 [2]&#xD;#&#xD;非public修饰的方法 在AbstractFallbackTransactionAttributeSource类的computeTransactionAttribute方法中有个判断，如果目标方法不是public，则TransactionAttribute返回null，即不支持事务。&#xA;被final、static关键字修饰的类或方法 spring事务底层使用了aop，也就是通过jdk动态代理或者cglib，帮我们生成了代理类，在代理类中实现的事务功能。但如果某个方法用final修饰了，那么在它的代理类中，就无法重写该方法，而添加事务功能。&#xA;类方法内部调用 updateStatus方法拥有事务的能力是因为spring aop生成代理了对象，但是这种方法直接调用了this对象的方法，所以updateStatus方法不会生成事务&#xA;解决方案 新加一个Service方法 在该Service类中注入自己 通过AopContent类 当前类没有被Spring管理&#xA;多线程调用 spring的事务是通过数据库连接来实现的。当前线程中保存了一个map，key是数据源，value是数据库连接。 同一个事务，其实是指同一个数据库连接，只有拥有同一个数据库连接才能同时提交和回滚。如果在不同的线程，拿到的数据库连接肯定是不一样的，所以是不同的事务。&#xA;(存储引擎)表不支持事务&#xA;未开启事务 springboot通过DataSourceTransactionManagerAutoConfiguration类，已经默默的帮你开启了事务。 使用的还是传统的spring项目，则需要在applicationContext.xml文件中，手动配置事务相关参数。如果忘了配置，事务肯定是不会生效的。&#xA;将注解标注在接口方法上&#xA;错误使用@Transactional [2]&#xD;#&#xD;错误的传播机制 目前只有这三种传播特性才会创建新事务：REQUIRED，REQUIRES_NEW，NESTED。&#xA;异常被内部catch 如果想要spring事务能够正常回滚，必须抛出它能够处理的异常。如果没有抛异常，则spring认为程序是正常的。&#xA;rollbackFor属性设置错误&#xA;@Transactional(rollbackFor = BusinessException.class) public void add(UserModel userModel) throws Exception { saveData(userModel); updateData(userModel); } 嵌套事务 可以将内部嵌套事务放在try/catch中，并且不继续往上抛异常。这样就能保证，如果内部嵌套事务中出现异常，只回滚内部事务，而不影响外部事务。&#xA;手动抛了别的异常&#xA;参考&#xD;#&#xD;Spring 踩坑之@Transactional 神奇失效 小鱼儿 spring事务（注解 @Transactional ）失效的12种场景 spring中12种@Transactional的失效场景(小结) Spring @Async/@Transactional 失效的原因及解决方案 未 </description>
    </item>
    <item>
      <title>负载均衡-算法</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/loadBalance/loadBalance/</link>
      <pubDate>Fri, 06 May 2022 11:29:37 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/loadBalance/loadBalance/</guid>
      <description>&#xA;负载均衡算法&#xD;#&#xD;LVS[1][2]&#xD;#&#xD;组件 类型 负载均衡算法 场景 LVS 静态 RR：roundrobin [常用] 轮询机制 WRR：Weighted RR [常用] 加权轮询，权重越大承担负载越大 SH：Source Hashing 源地址哈希 实现session sticky缺点：调度粒度大，对负载均衡效果差； DH：Destination Hashing 目标地址哈希 动态 LC：least connections 适用于长连接应用&#xA;Overhead=activeconns*256+inactiveconns WLC：Weighted LC [常用] 默认调度方法,较常用（加上了权重）&#xA;Overhead=(activeconns*256+inactiveconns)/weight SED：Shortest Expection Delay Overhead=(activeconns+1)*256/weight NQ：Never Queue， 第一轮均匀分配，后续SED****SED****算法改进 LBLC：Locality-Based LC 动态的 ****DH****连接算法 LBLCR：LBLC with Replication 带复制功能的LBLC Nginx [3]&#xD;#&#xD;组件 类型 负载均衡算法 场景 Nginx 静态 轮询 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除 加权轮询 指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况 IP Hash 每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题 动态 Fair （第三方） 按后端服务器的响应时间来分配请求，响应时间短的优先分配 url_hash（第三方） 按访问 url 的 hash 结果来分配请求，使每个 url 定向到同一个后端服务器，后端服务器为缓存时比较有效 Least Connections HAproxy&#xD;#&#xD;组件 类型 负载均衡算法 场景 HAproxy 静态 轮询 加权轮询 IP Hash 动态 Least Connections Source LVS工作模式[11-16]&#xD;#&#xD;DR TUN模式 NAT模式 参考&#xD;#&#xD;LVS负载均衡集群服务搭建详解 LVS调度算法总结 LVS、Nginx 及 HAProxy 的区别 LVS集群的负载调度 *** 未 LVS工作模式&#xD;#&#xD;LVS三种模式的区别及负载均衡算法 LVS 介绍以及配置应用 *** 深入浅出 LVS 负载均衡（一）NAT、FULLNAT 模型原理 未 深入浅出 LVS 负载均衡（二）DR、TUN 模型原理 未 深入浅出 LVS 负载均衡（三）实操 NAT、TUNNEL 模型 未 深入浅出 LVS 负载均衡（四）实操 DR 模型、Keepalived DR 模型的高可用 未 </description>
    </item>
    <item>
      <title>SpringCloud</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/Springcloud/springCloud/</link>
      <pubDate>Sun, 06 Jun 2021 16:07:33 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/Springcloud/springCloud/</guid>
      <description>参考&#xD;#&#xD;SpringCloud 面试题 （持续更新、吐血推荐）</description>
    </item>
    <item>
      <title>Nginx优化</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/loadBalance/nginxOptimize/</link>
      <pubDate>Thu, 26 Mar 2020 12:07:27 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/loadBalance/nginxOptimize/</guid>
      <description>Nginx 参数优化&#xD;#&#xD;反向代理&#xD;#&#xD;proxy_cache: 10M(重要) proxy_cache_path /data/nginx_cache/ levels=1:2 keys_zone=my_zone:10m inactive=300s max_size=5g; tls ssl&#xD;#&#xD;ssl_session_cache builtin:1000 shared:SSL:10m; /// 一天内连接上的用户， 不需要再协商秘钥 ssl_session_cache builtin:1000 shared:SSL:10m; /// 1m -&amp;gt; 4000个https连接 ssl_session_timeout 10m; /// 10分钟 ssl_protocols TLSv1.2; /// 版本号 非安全请求重定向&#xD;#&#xD;No redirect: 无重定向 Redirect： 301-302 -》 转到https站点 gzip&#xD;#&#xD;gzip on; gzip_comp_level 5; gzip_http_version 1.1; /// 注意：gzip 在1.1上有效， http2.0上是无效的 gzip_min_length 256; gzip_types application/atom+xml ... gzip_proxied any; gzip_vary on; worker&#xD;#&#xD;worker_connections 16384; /// 一个worker有 16384/2=8192 ‬个链接 .</description>
    </item>
    <item>
      <title>SpringBoot</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/Springcloud/springboot/</link>
      <pubDate>Fri, 20 Sep 2019 15:02:28 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/Springcloud/springboot/</guid>
      <description>Core&#xD;#&#xD;Spring Boot定义&#xD;#&#xD;Spring Boot is designed to get you up and running as quickly as possible, with minimal upfront configuration of Spring. Spring Boot takes an opinionated view of building production-ready applications.&#xA;Features (官方)&#xD;#&#xD;Create stand-alone Spring applications Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files) Provide opinionated &amp;lsquo;starter&amp;rsquo; dependencies to simplify your build configuration Automatically configure Spring and 3rd party libraries whenever possible Provide production-ready features such as metrics, health checks, and externalized configuration Absolutely no code generation and no requirement for XML configuration 特性&#xD;#&#xD;自动配置 Auto Configuration 为Spring及第三方库提供自动配置; 简化了项目的构建配置;</description>
    </item>
    <item>
      <title>Nginx总结</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/loadBalance/nginx/</link>
      <pubDate>Thu, 22 Aug 2019 02:17:53 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/loadBalance/nginx/</guid>
      <description>Nginx总结&#xD;#&#xD;Nginx架构&#xD;#&#xD;共享内存 Slab 分页 4K， 8K， 16K Nginx反向代理&#xD;#&#xD;类型&#xD;#&#xD;带权重的round-robin算法是基础 hash负载均衡算法 ip-hash算法 -&amp;gt; real-ip hash算法 -&amp;gt; 自定义可以hash的参数（比如?userName） 问题: 如果有upstream的机器宕机， hash算法还会路由到这台机器 解决方案：使用一致性hash(consistent),hash 环&#xA;least-connection算法， 如果所有节点的connection都一致， 会退化成为round-robin算法。 可扩展立方体&#xD;#&#xD;X-axis 基于round-robin或者least-connected算法分发请求 -&amp;gt; 相对简单 Y-axis 基于URL对功能进行分发。 -&amp;gt; 相对复杂 Z-axis 将用户IP地址或者其他信息映射到某个特定的服务或者集群 -&amp;gt; 相对简单 多种协议反向代理&#xD;#&#xD;tcp udp 透传 http -&amp;gt; memcached , scgi, fastcgi, uwsgi, grpc, http, websocket 反向代理流程&#xD;#&#xD;修改发送到upstream机器的请求的nginx指令。&#xA;节点热更新&#xD;#&#xD;master节点热更新&#xD;#&#xD;worker节点热更新&#xD;#&#xD;域名转发到其他域名[2]&#xD;#&#xD;return 指令 rewrite proxy_pass 文件下载&#xD;#&#xD;nginx.</description>
    </item>
    <item>
      <title>Spring事务</title>
      <link>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/Springcloud/springTransaction/</link>
      <pubDate>Mon, 16 Mar 2015 14:52:34 +0000</pubDate>
      <guid>https://www6v.github.io/www6vMiddleware/docs/serviceGovernance/Springcloud/springTransaction/</guid>
      <description>&#xA;三种事务模型&#xD;#&#xD;三种事务模型 本地事务模型 事务全部交给数据库来管理 编程式事务模型 事务的提交和回滚操作完全交给开发人员 TransactionTemplate TransactionCallback中执行业务代码 事务代码和业务代码可以实现分离的原理【1】 声明式事务模型【AOP】 事务的提交和回滚操作全部交给Spring来管理 事务拦截器TransactionInterceptor 事务管理器transactionManager【2】 事务配置的提供者transactionAttributes【3】&#xA;业务方法+传播属性 代理的对象target&#xA;业务对象 参考&#xD;#&#xD;分布式事务系列（1.1）Spring事务管理器PlatformTransactionManager 乒乓狂魔 分布式事务系列（1.2）Spring的事务体系 乒乓狂魔 </description>
    </item>
  </channel>
</rss>
